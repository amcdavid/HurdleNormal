% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NeighborhoodEstimation.R
\name{Block}
\alias{Block}
\title{Define parameter groups}
\usage{
Block(this.model, blist, mlist, nlist, group = "components", lambda,
  penalty.scale = NULL)
}
\arguments{
\item{this.model}{(optional) a matrix created by \code{\link{makeModel}}}

\item{blist}{a list of parameter indices, one per block.  By default the first block is assumed to be unpenalized.}

\item{mlist}{a list of parameter indices, one per column of the model.matrix. If omitted, assumed to equal to the identity.}

\item{nlist}{a named list of block indices, one per node}

\item{group}{\code{character}: one of components, or none.}

\item{lambda}{currently ignored}

\item{penalty.scale}{optional list containing elements `scale` and `group`.
`group` should be one of 'block' or 'none'.  `scale` should be \code{numeric} of length `blist` or the sum of the `blist` lengths.}
}
\value{
a list containing a data.table `map` giving the mapping between parameters, groups and penalty scales and some other components
}
\description{
Define parameter groups and relative penalization.
If \code{this.model} is specified, then, neither \code{blist} nor \code{nlist} should be provided.
If \code{this.model} is not specified then both of the preceeding must be provided.
When \code{this.model} is provided, it is assumed to have been created by with \code{makeModel}.
 Column indices indicated in the attribute `fixedCols` are unpenalized intercepts, then followed by pairs of interaction terms.
The grouping corresponds to the parameter set for a node.
Otherwise, blist, mlist and nlist should be set.  See details.
}
\details{
There are four components that all need to be mapped between each other.
In increasing abstraction, with variable prefixes in parenthesis:
1. (p)arameter vector. The map is given in these terms. 
2. (mm) model matrix--columns from the covariate matrix.
3. (b)locks -- penalty groups
4. (n)odes. -- the graph-theoretic structure.
5. lambda -- penalties as a function of blocks.
All of these components are provided in the `map`
}
